document.addEventListener('DOMContentLoaded', () => {
    const cartItemsContainer = document.getElementById('cart-items');
    const cartTotal = document.getElementById('cart-total');
    const form = document.getElementById('checkout-form');

    function loadCart() {
        console.log("‚úÖ loadCart –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è");
        const cart = JSON.parse(localStorage.getItem('cart')) || [];

        cartItemsContainer.innerHTML = '';
        let total = 0;

        if (cart.length === 0) {
            cartItemsContainer.innerHTML = `
                <p style="text-align: center; " >–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</p>
                <a class="btn-back-to-catalog" href="page2.html" style="
                
                ">–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥</a>
            `;
            cartTotal.textContent = '';
            form.style.display = 'none';
            return;
        }

        cart.forEach((item, index) => {
            const itemTotal = item.qty * item.price;
            total += itemTotal;

            const div = document.createElement('div');
            div.className = 'cart-item';
            div.setAttribute('data-index', index); // –¥–ª—è –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

            div.innerHTML = `
    <img src="${item.img}" alt="${item.name}" />
    <div class="cart-details">
        <div><strong>${item.name}</strong></div>
        <div class="cart-size">–†–æ–∑–º—ñ—Ä: ${item.size}</div>
        ${item.desc ? `<div class="cart-desc">${item.desc}</div>` : ''}

        <div class="card-block-size-price">
            <div class="cart-controls">
                <button class="qty-btn minus ${item.qty === 1 ? 'trash' : ''}" 
                    aria-label="${item.qty === 1 ? '–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä' : '–£–º–µ–Ω—å—à–∏—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å'}">
                    ${item.qty === 1 ? '' : '‚àí'}
                </button>
                <span class="card-qty">${item.qty}</span>
                <button class="qty-btn plus">+</button>
                
            </div>
            <div class="cart-price">${item.price} –≥—Ä–Ω</div>
        </div>
    </div>
`;
            cartItemsContainer.appendChild(div);
        });

        cartTotal.textContent = `–í—Å—å–æ–≥–æ: ${total} –≥—Ä–Ω`;
        form.style.display = 'flex';
    }

    // üìå –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è + - √ó
    cartItemsContainer.addEventListener('click', (e) => {
        const target = e.target;
        const itemDiv = target.closest('.cart-item');
        if (!itemDiv) return;

        const index = parseInt(itemDiv.dataset.index);
        const cart = JSON.parse(localStorage.getItem('cart')) || [];

        if (target.classList.contains('plus')) {
            cart[index].qty += 1;
        }
        if (target.classList.contains('minus')) {
            if (cart[index].qty > 1) {
                cart[index].qty -= 1;
            } else {
                // qty === 1 -> –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω–∫–∏: —É–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä
                cart.splice(index, 1);
            }
        }

        if (target.classList.contains('remove-btn')) {
            cart.splice(index, 1);
        }

        // if (target.classList.contains('minus')) {
        //     cart[index].qty -= 1;
        //     if (cart[index].qty <= 0) cart.splice(index, 1);
        // }

        // if (target.classList.contains('remove-btn')) {
        //     cart.splice(index, 1);
        // }

        localStorage.setItem('cart', JSON.stringify(cart));

        loadCart();
    });

    // üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã
    form.addEventListener('submit', (e) => {
        e.preventDefault();

        const name = form.name.value.trim();
        const phone = form.phone.value.trim();
        const address = form.address.value.trim();
        const payment = form.payment.value;

        if (!name || !phone || !address || !payment) {
            alert('–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –ø–æ–ª—è.');
            return;
        }

        const cart = JSON.parse(localStorage.getItem('cart')) || [];
        if (cart.length === 0) {
            alert('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!');
            return;
        }

        alert(`‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, ${name} !
                –°–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏: ${payment === 'card' ? '–ö–∞—Ä—Ç–∫–æ—é –æ–Ω–ª–∞–π–Ω' : '–ù–∞–∫–ª–∞–¥–µ–Ω–∏–π –ø–ª–∞—Ç—ñ–∂'}
–ú–∏ —Å–∫–æ—Ä–æ –∑ –≤–∞–º–∏ –∑–≤'—è–∂–µ–º–æ—Å—å.`);

        localStorage.removeItem('cart');
        window.location.href = 'index.html';
    });

    loadCart();
});



document.addEventListener('DOMContentLoaded', () => {
    const form = document.querySelector('#checkout-form');
    if (!form) return;

    const targetBtn = form.querySelector('.submit-btn');
    if (!targetBtn) return;

    // –°–æ–∑–¥–∞—ë–º –ø–ª–∞–≤–∞—é—â—É—é –∫–æ–ø–∏—é
    const floatBtn = document.createElement('button');
    floatBtn.type = 'button';
    floatBtn.className = 'floating-submit';
    floatBtn.textContent = targetBtn.textContent || '–î–æ —Å–ø–ª–∞—Ç–∏';
    document.body.appendChild(floatBtn);

    // –ö–ª–∏–∫ –ø–æ –ø–ª–∞–≤–∞—é—â–µ–π ‚Äî –∫–ª–∏–∫–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª (—Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç submit —Ñ–æ—Ä–º—ã)
    floatBtn.addEventListener('click', () => {
        targetBtn.click();
    });

    // –°–ª–µ–¥–∏–º –∑–∞ –≤–∏–¥–∏–º–æ—Å—Ç—å—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∫–Ω–æ–ø–∫–∏
    // –ö–æ–≥–¥–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª –≤–∏–¥–µ–Ω ‚Äî –∫–æ–ø–∏—é –ø—Ä—è—á–µ–º, –∫–æ–≥–¥–∞ –Ω–µ –≤–∏–¥–µ–Ω ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º.
    const observer = new IntersectionObserver(
        ([entry]) => {
            if (entry.isIntersecting) {
                floatBtn.classList.remove('show');
            } else {
                floatBtn.classList.add('show');
            }
        },
        {
            threshold: 1,              // —Å—á–∏—Ç–∞–µ–º "–≤–∏–¥–∏–º–æ–π", –∫–æ–≥–¥–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤ –∫–∞–¥—Ä–µ
            // –ø–æ–¥–ø—Ä–∞–≤—å –Ω–∏–∂–Ω–∏–π –æ—Ç—Å—Ç—É–ø, —á—Ç–æ–±—ã —É—á–µ—Å—Ç—å —Å–≤–æ–∏ –ø–æ–ª—è/–±–µ–∑–æ–ø–∞—Å–Ω—É—é –∑–æ–Ω—É
            rootMargin: '0px 0px -16px 0px'
        }
    );

    observer.observe(targetBtn);

    // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π: –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—è–µ—Ç—Å—è (–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è/–∏—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞) ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º
    const mo = new MutationObserver(() => {
        floatBtn.textContent = targetBtn.textContent;
    });
    mo.observe(targetBtn, { childList: true, characterData: true, subtree: true });
});

